@using PagedList;
@using PagedList.Mvc;
@using Service.ESS.Provider;
@using Service.ESS.Model;
@model IPagedList<Service.ESS.Model.ESSObject>

@{
    InverterService inverterService = new InverterService();
    DateTime startDay = ViewBag.startDay;
    DateTime endDay = ViewBag.endDay;
    string sDay = startDay.ToString();
    string eDay = endDay.ToString();
    string startTime = startDay.ToString("HH:mm:ss");
    string endTime = endDay.ToString("HH:mm:ss");
    var tabType = "Inverters";
    string connStr = tabType + "+" + sDay + "+" + eDay;
    string stationID = ViewBag.stationID;
    int StationNum = ViewBag.StationNum;
}

<script type="text/javascript">
    function closeInvModel() {
        $('#ImvertersModal').hide();
        $('.modal-backdrop').hide();
    }
</script>

<style type="text/css">
    .table thead th {
   vertical-align:middle;
        }
    
</style>

<div class="row" align="center">
    <div class="col text-left">
        <p class="h6">開始時間:@startDay </p>
        <p class="h6">結束時間:@endDay</p>
        <p class="h6">@ViewBag.StationName ; 共 @ViewBag.Count 筆資料</p>
    </div>
    <div class="col ">
        <button type="button" class="btn btn-outline-info" data-toggle="modal" data-target="#ImvertersModal" style="float:right">
            Excel
        </button>
        <!--Modal -->
        <div class="modal fade" id="ImvertersModal" tabindex="-1" role="dialog" aria-labelledby="ImvertersModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@tabType</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        @using (Html.BeginForm("XLSX", "Tab", FormMethod.Post))
                        {
                            @Html.AntiForgeryToken()
                            <div class="modal-body">
                                <div class="form-check form-check-inline h5">
                                    <input class="form-check-input" type="radio" name="inlineRadio" id="inlineRadio1" value="option1">
                                    <label class="form-check-label" for="inlineRadio1">當日(00:00起算)</label>
                                </div>
                                <div class="form-check form-check-inline h5">
                                    <input class="form-check-input" type="radio" name="inlineRadio" id="inlineRadio2" value="option2">
                                    <label class="form-check-label" for="inlineRadio2">當月(1日起算)</label>
                                </div>
                                <br />
                                <div class="form-check form-check-inline h5">
                                    <input class="form-check-input" type="radio" name="inlineRadio" id="inlineRadio3" value="option3" checked>
                                    <label class="form-check-label" for="inlineRadio4">時間區間</label>
                                </div>
                                <h6>開始時間:[ @startDay ]</h6>
                                <h6>結束時間:[ @endDay ]</h6>
                            </div>
                            <div class="modal-footer">
                                <input type="hidden" name="startDay" value=@startDay>
                                <input type="hidden" name="endDay" value=@endDay>
                                <input type="hidden" name="startTime" value=@startTime>
                                <input type="hidden" name="endTime" value=@endTime>
                                <input type="hidden" name="tabType" value=@tabType>
                                <input type="hidden" name="StationNum" value=@StationNum>
                                <button type="submit" class="btn btn-primary btn-sm" id="btnHGP" onclick="closeGridModel()">匯出EXCEL</button>
                                <button type="button" class="btn btn-secondary  btn-sm" data-dismiss="modal">關閉</button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
        <!--Modal -->
    </div>
</div>
<br />
<div class="row">
    <div class="col">
        <table class="table table-striped " style=";vertical-align:middle">
            <thead>
                <tr>
                    <th scope="col" style="width:15%">資料時間</th>
                    <th scope="col" style="width:13%">工作模式</th>
                    <th scope="col" style="width:7%">
                        <div class="row">
                            <div class="col">市電電壓</div>
                            <div class="w-100"></div>
                            <div class="col">(V)</div>
                        </div>
                    </th>
                    <th scope="col" style="width:7%">
                        <div class="row">
                            <div class="col">市電頻率</div>
                            <div class="w-100"></div>
                            <div class="col">(Hz)</div>
                        </div>
                    </th>
                    <th scope="col" style="width:7%">
                        <div class="row">
                            <div class="col">輸出電壓</div>
                            <div class="w-100"></div>
                            <div class="col">(V)</div>
                        </div>
                    </th>
                    <th scope="col" style="width:7%">
                        <div class="row">
                            <div class="col">輸出頻率</div>
                            <div class="w-100"></div>
                            <div class="col">(Hz)</div>
                        </div>
                    </th>
                    <th scope="col" style="width:9%">
                        <div class="row">
                            <div class="col">總輸出實功率</div>
                            <div class="w-100"></div>
                            <div class="col"> (kW)</div>
                        </div>
                    </th>
                    <th scope="col" style="width:7%">
                        <div class="row">
                            <div class="col">電池電壓</div>
                            <div class="w-100"></div>
                            <div class="col">(V)</div>
                        </div>

                    </th>
                    @*<th scope="col" style="width:7%">
                        <div class="row">
                            <div class="col">電池容量</div>
                            <div class="w-100"></div>
                            <div class="col"> (%)</div>
                       </div>
                    </th>*@
                    <th scope="col" style="width:7%">
                        <div class="row">
                            <div class="col">太陽能電壓</div>
                            <div class="w-100"></div>
                            <div class="col">(V)</div>
                        </div>
                    </th>
                    <th scope="col" style="width:7%">
                        <div class="row">
                            <div class="col">充電電流</div>
                            <div class="w-100"></div>
                            <div class="col">(A)</div>
                        </div>
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var invs in Model)
                {
                    var time = invs.UpdateDate.AddHours(8).ToString();
                    string Timer = time.ToString();
                    string T1 = null;
                    double T2 = 0, T3 = 0, T4 = 0, T5 = 0, T6 = 0, T7 = 0, T8 = 0, T9 = 0, T10 = 0;
                    if (!string.IsNullOrEmpty(invs.InvertersIDs))
                    {
                        string[] IDs = invs.InvertersIDs.Trim().Split('|');
                        List<string> BtnGroup = new List<string>();
                        foreach (var inv in IDs)
                        {
                            if (!string.IsNullOrEmpty(inv))
                            {
                                Guid ID = Guid.Parse(inv);
                                Inverter inverter = inverterService.ReadByID(ID);
                                string mod = inverter.DeviceMode.Trim();
                                if (mod == "P") { mod = "電源模式"; }
                                else if (mod == "S") { mod = "待機模式"; }
                                else if (mod == "L") { mod = "市電模式"; }
                                else if (mod == "B") { mod = "電池模式"; }
                                else if (mod == "F") { mod = " 故障模式"; }
                                else if (mod == "H") { mod = "省電模式"; }
                                else { mod = "離線"; }
                                T1 += mod;
                                T2 += inverter.GridVoltage;
                                T3 += inverter.GridFrequency;
                                T4 += inverter.AC_OutputVoltage;
                                T5 += inverter.AC_OutputFrequency;

                                var toc = inverter.ParallelInformation_TotalOutputActivePower.Trim().Split('|');
                                int i = 1;
                                foreach (var d in toc)
                                {
                                    if (!d.IsEmpty())
                                    {
                                        T6 += Convert.ToDouble(d) / 1000.0;
                                        i++;
                                    }
                                }
                                T7 += inverter.BatteryVoltage;
                                T8 += inverter.BatteryCapacity;
                                T9 += inverter.PV_InputVoltage;

                                var tcc = inverter.ParallelInformation_TotalChargingCurrent.Trim().Split('|');
                                int j = 1;
                                foreach (var d in tcc)
                                {
                                    if (!d.IsEmpty())
                                    {
                                        T10 += Convert.ToDouble(d);
                                        j++;
                                    }
                                }
                            }
                        }
                        <tr>
                            <th scope="row">@Timer</th>
                            <td>@T1</td>
                            <td>@Math.Round(T2, 2)</td>
                            <td>@Math.Round(T3, 2)</td>
                            <td>@Math.Round(T4, 2)</td>
                            <td>@Math.Round(T5, 2)</td>
                            <td>@Math.Round(T6, 2)</td>
                            <td>@Math.Round(T7, 2)</td>
                            @*<td>@Math.Round(T8, 2)</td>*@
                            <td>@Math.Round(T9, 2)</td>
                            <td>@Math.Round(T10, 2)</td>
                        </tr>
                    }
                    else
                    {
                        <tr>
                            <th scope="row">@Timer</th>
                            <td>Unknown Mode</td>
                            <td>0</td>
                            <td>0</td>
                            <td>0</td>
                            <td>0</td>
                            <td>0</td>
                            <td>0</td>
                            <td>0</td>
                    
                            <td>0</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
        @if (Model.Count > 0)
        {    
            <div>@Html.PagedListPager(Model, Page => Url.Action("/history/historyInverters", new { connStr, StationNum, stationID, Page }))</div>
        }
        </div>
</div>
